import os
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(level=logging.INFO)
API_TOKEN = os.getenv('TG_BOT_TOKEN')

bot = Bot(token=API_TOKEN)
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
class Form(StatesGroup):
    age = State()
    gender = State()
    hearing_issue = State()
    hearing_degree = State()
    consent = State()


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    await state.clear()
    keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [
                types.KeyboardButton(text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"),
                types.KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")
            ]
        ],
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–±–∏—Ä–∞–µ—Ç –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏–Ω–≥–≤–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel –∏ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
@dp.message(Command("cancel"))
@dp.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message,  state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()

    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É"
@dp.message(F.text == "üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def start_questionnaire(message: types.Message, state: FSMContext):
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):

    try:
        age = int(message.text)
        if age < 1 or age > 120:
            raise ValueError
        await state.update_data(age=age)
        await state.set_state(Form.gender)
        
        gender_keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ú—É–∂—Å–∫–æ–π"), 
                 types.KeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π")],
            ],
            resize_keyboard=True
        )
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120)!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞
@dp.message(Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return
    
    await state.update_data(gender=message.text)
    await state.set_state(Form.hearing_issue)
    
    hearing_keyboard = types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="–î–∞"), 
             types.KeyboardButton(text="–ù–µ—Ç")],
        ],
        resize_keyboard=True
    )
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ª—É—Ö–∞?", reply_markup=hearing_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ª—É—Ö–∞
@dp.message(Form.hearing_issue)
async def process_hearing_issue(message: types.Message, state: FSMContext):
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")
        return
    
    if message.text == "–ù–µ—Ç":
        await state.update_data(hearing_issue=False)
        await finish_questionnaire(message, state)
    else:
        await state.update_data(hearing_issue=True)
        await state.set_state(Form.hearing_degree)
        
        degree_keyboard = types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–õ–µ–≥–∫–∞—è"), types.KeyboardButton(text="–£–º–µ—Ä–µ–Ω–Ω–∞—è")],
                [types.KeyboardButton(text="–¢—è–∂–µ–ª–∞—è"), types.KeyboardButton(text="–ì–ª—É—Ö–æ—Ç–∞")],
            ],
            resize_keyboard=True
        )
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:", reply_markup=degree_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
@dp.message(Form.hearing_degree)
async def process_hearing_degree(message: types.Message, state: FSMContext):
    valid_degrees = ["–õ–µ–≥–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–¢—è–∂–µ–ª–∞—è", "–ì–ª—É—Ö–æ—Ç–∞"]
    if message.text not in valid_degrees:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    
    await state.update_data(hearing_degree=message.text)
    await finish_questionnaire(message, state)

async def finish_questionnaire(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()
    
    response = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–Ω–∫–µ—Ç—É! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {data['age']}\n"
        f"–ü–æ–ª: {data['gender']}\n"
        f"–ù–∞—Ä—É—à–µ–Ω–∏—è —Å–ª—É—Ö–∞: {'–î–∞' if data['hearing_issue'] else '–ù–µ—Ç'}"
    )
    
    if data.get('hearing_degree'):
        response += f"\n–°—Ç–µ–ø–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏—è: {data['hearing_degree']}"
    
    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())