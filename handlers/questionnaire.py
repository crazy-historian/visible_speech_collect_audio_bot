# handlers/questionnaire.py
from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram import F
from states.form import Form
from keyboards.reply import gender_keyboard, hearing_issue_keyboard, hearing_degree_keyboard, consent_keyboard
from utils.markdown import escape_markdown_v2


router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∫–µ—Ç—ã
@router.message(F.text =="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
async def start_questionnaire(message: types.Message, state: FSMContext):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∫–µ—Ç—É, –Ω–∞—á–∏–Ω–∞—è —Å –≤–æ–ø—Ä–æ—Å–∞ –æ –≤–æ–∑—Ä–∞—Å—Ç–µ."""
    await state.set_state(Form.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç?", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑—Ä–∞—Å—Ç–∞
@router.message(Form.age)
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–æ–ø—Ä–æ—Å—É –æ –ø–æ–ª–µ."""
    try:
        age = int(message.text)
        if age < 1 or age > 120:  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞
            raise ValueError
        await state.update_data(age=age)
        await state.set_state(Form.gender)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_keyboard())
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 120)!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–∞
@router.message(Form.gender)
async def process_gender(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –≤–æ–ø—Ä–æ—Å—É –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å–ª—É—Ö–∞."""
    if message.text not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞!")
        return
    
    await state.update_data(gender=message.text)
    await state.set_state(Form.hearing_issue)
    await message.answer("–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ª—É—Ö–∞?", reply_markup=hearing_issue_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö —Å–ª—É—Ö–∞
@router.message(Form.hearing_issue)
async def process_hearing_issue(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –Ω–∞–ª–∏—á–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π —Å–ª—É—Ö–∞."""
    if message.text not in ["–î–∞", "–ù–µ—Ç"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞!")
        return
    
    if message.text == "–ù–µ—Ç":
        await state.update_data(hearing_issue=False)
        await finish_questionnaire(message, state)
    else:
        await state.update_data(hearing_issue=True)
        await state.set_state(Form.hearing_degree)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–µ–ø–µ–Ω—å –Ω–∞—Ä—É—à–µ–Ω–∏—è:", reply_markup=hearing_degree_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–ª—É—Ö–∞
@router.message(Form.hearing_degree)
async def process_hearing_degree(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–µ–ø–µ–Ω–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∞–Ω–∫–µ—Ç—É."""
    valid_degrees = ["–õ–µ–≥–∫–∞—è", "–£–º–µ—Ä–µ–Ω–Ω–∞—è", "–¢—è–∂–µ–ª–∞—è", "–ì–ª—É—Ö–æ—Ç–∞"]
    if message.text not in valid_degrees:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞!")
        return
    
    await state.update_data(hearing_degree=message.text)
    await finish_questionnaire(message, state)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
async def finish_questionnaire(message: types.Message, state: FSMContext):
    """–í—ã–≤–æ–¥–∏—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –±–æ—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–≥–ª–∞—Å–∏—è."""
    
    response = ("–°–ø–∞—Å–∏–±–æ –∑–∞ –∞–Ω–∫–µ—Ç—É!")
    
    await message.answer(response)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —ç—Ç–∞–ø—É —Å–æ–≥–ª–∞—Å–∏—è
    await state.set_state(Form.consent)

    with open('texts/agreement.md', 'r', encoding='utf-8') as file:
        agreement_text = file.read()
        agreement_text = escape_markdown_v2(agreement_text)
        await message.answer(agreement_text, reply_markup=consent_keyboard(), parse_mode='MarkdownV2')